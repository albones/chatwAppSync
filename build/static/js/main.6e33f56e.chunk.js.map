{"version":3,"sources":["aws-exports.js","Rooms.js","Chat.js","ChatWithData.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","LIST_ROOMS","gql","CREATE_ROOM","query","fetchPolicy","data","loading","error","message","CircularProgress","List","subheader","ListSubheader","component","dense","listRooms","items","map","room","ListItem","key","id","divider","Button","style","flex","Link","to","ListItemText","primary","secondary","createdAt","mutation","mutate","Fab","color","aria-label","position","bottom","right","onClick","uuid","variables","optimisticResponse","createRoom","__typename","Date","update","cache","readQuery","filter","item","writeQuery","Chat","this","props","subscribeToNewMessages","messages","m","onSend","text","user","getRoom","styles","container","content","when","owner","name","React","Component","height","CREATE_MESSAGE","GET_ROOM_MESSAGES","CREATE_MESSAGES_SUB","withUser","WrappedComponent","match","username","roomId","params","subscribeToMore","results","document","updateQuery","prev","subscriptionData","newMessage","onCreateMessage","Object","assign","createMessage","state","Auth","currentAuthenticatedUser","setState","Amplify","configure","AppSyncConfig","client","AWSAppSyncClient","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","aws_appsync_authenticationType","credentials","currentCredentials","jwtToken","a","currentSession","getAccessToken","getJwtToken","complexObjectsCredentials","App","path","ChatWithData","Rooms","withAuthenticator","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6e33f56e.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-west-2\",\n    \"aws_cognito_identity_pool_id\": \"us-west-2:22ad3a45-0c50-4cd3-aeca-ee139835a84b\",\n    \"aws_cognito_region\": \"us-west-2\",\n    \"aws_user_pools_id\": \"us-west-2_5CCbd8H1R\",\n    \"aws_user_pools_web_client_id\": \"2gq3f9887krk0t1qkjvbapq4pk\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://ni4vxhw3gvfetdnrela7af2szy.appsync-api.us-west-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-west-2\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\"\n};\n\n\nexport default awsmobile;\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  List,\r\n  ListSubheader,\r\n  ListItem,\r\n  ListItemText,\r\n  CircularProgress\r\n} from \"@material-ui/core\";\r\nimport { Fab } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { Link } from \"react-router-dom\";\r\nimport gql from \"graphql-tag\";\r\nimport uuid from \"uuid/v4\";\r\nimport { Query, Mutation } from \"react-apollo\";\r\n\r\nconst LIST_ROOMS = gql`\r\n  query ListRooms {\r\n    listRooms {\r\n      items {\r\n        __typename\r\n        id\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n/*\r\nexport default () => {\r\n  return (\r\n    <>\r\n      <Query query={LIST_ROOMS} fetchPolicy=\"cache-and-network\">\r\n        {({ data, loading, error }) => {\r\n          if (error) return <div>{error.message}</div>;\r\n          if (loading) return <CircularProgress />;\r\n          return (\r\n            <List\r\n              subheader={\r\n                <ListSubheader component=\"div\">List of rooms</ListSubheader>\r\n              }\r\n              dense\r\n            >\r\n              {data.listRooms.items.map(room => (\r\n                <ListItem key={room.id} divider>\r\n                  <Button\r\n                    style={{ flex: 1 }}\r\n                    component={Link}\r\n                    to={`/room/${room.id}`}\r\n                  >\r\n                    <ListItemText\r\n                      primary={room.id}\r\n                      secondary={room.createdAt}\r\n                    />\r\n                  </Button>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          );\r\n        }}\r\n      </Query>\r\n    </>\r\n  );\r\n}; */\r\n\r\nconst CREATE_ROOM = gql`\r\n  mutation CreateRoom($id: ID!) {\r\n    createRoom(input: { id: $id }) {\r\n      __typename\r\n      id\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport default () => {\r\n  return (\r\n    <>\r\n    <Query query={LIST_ROOMS} fetchPolicy=\"cache-and-network\">\r\n        {({ data, loading, error }) => {\r\n          if (error) return <div>{error.message}</div>;\r\n          if (loading) return <CircularProgress />;\r\n          return (\r\n            <List\r\n              subheader={\r\n                <ListSubheader component=\"div\">List of rooms</ListSubheader>\r\n              }\r\n              dense\r\n            >\r\n              {data.listRooms.items.map(room => (\r\n                <ListItem key={room.id} divider>\r\n                  <Button\r\n                    style={{ flex: 1 }}\r\n                    component={Link}\r\n                    to={`/room/${room.id}`}\r\n                  >\r\n                    <ListItemText\r\n                      primary={room.id}\r\n                      secondary={`Created at ${room.createdAt}`}\r\n                    />\r\n                  </Button>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          );\r\n        }}\r\n      </Query>\r\n      <Mutation mutation={CREATE_ROOM}>\r\n        {mutate => (\r\n          <Fab\r\n            color=\"primary\"\r\n            aria-label=\"Add\"\r\n            style={{ position: \"absolute\", bottom: 10, right: 10 }}\r\n            onClick={() => {\r\n              const id = uuid(); // generate ID - to be consistent with server after sync\r\n              mutate({\r\n                variables: {\r\n                  id\r\n                },\r\n                optimisticResponse: () => ({\r\n                  createRoom: {\r\n                    __typename: \"Room\",\r\n                    id,\r\n                    createdAt: new Date()\r\n                  }\r\n                }),\r\n                update: (cache, { data: { createRoom } }) => {\r\n                  const data = cache.readQuery({ query: LIST_ROOMS });\r\n                  // filter element is there cuz if you are online, you might get the item faster\r\n                  data.listRooms.items = [\r\n                    createRoom,\r\n                    ...data.listRooms.items.filter(\r\n                      item => item.id !== createRoom.id\r\n                    )\r\n                  ];\r\n                  cache.writeQuery({ query: LIST_ROOMS, data });\r\n                }\r\n              });\r\n            }}\r\n          >\r\n            <AddIcon />\r\n          </Fab>\r\n        )}\r\n      </Mutation>\r\n    </>\r\n  );\r\n};","import { GiftedChat } from \"react-web-gifted-chat\";\r\nimport React from \"react\";\r\n\r\nclass Chat extends React.Component {\r\n  componentDidMount() {\r\n    this.props.subscribeToNewMessages();\r\n  }\r\n\r\n  onSend(messages = []) {\r\n    messages.map(m => this.props.onSend(m.text));\r\n  }\r\n\r\n  render() {\r\n    const { loading, error, data, user } = this.props;\r\n    if (error) return <div>{error.message}</div>;\r\n    if (loading) return <div>Loading</div>;\r\n\r\n    const messages = data.getRoom.messages.items;\r\n    return (\r\n      <div style={styles.container}>\r\n        <GiftedChat\r\n          messages={messages.map(m => ({\r\n            id: m.id,\r\n            text: m.content,\r\n            createdAt: new Date(m.when),\r\n            user: {\r\n              id: m.owner,\r\n              name: m.owner\r\n            }\r\n          }))}\r\n          onSend={messages => this.onSend(messages)}\r\n          user={{\r\n            id: user\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    flex: 1,\r\n    height: \"100vh\"\r\n  }\r\n};\r\n\r\nexport default Chat;","import React, { Component } from \"react\";\r\nimport { Mutation, Query } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nimport { withUser } from \"./helpers\";\r\nimport Chat from \"./Chat\";\r\n\r\nconst CREATE_MESSAGE = gql`\r\n  mutation createMessage($roomId: ID!, $when: String!, $content: String!) {\r\n    createMessage(input: { roomId: $roomId, when: $when, content: $content }) {\r\n      __typename\r\n      id\r\n      when\r\n      content\r\n      owner\r\n      roomId\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ROOM_MESSAGES = gql`\r\n  query GetRoomMessages($roomId: ID!) {\r\n    getRoom(id: $roomId) {\r\n      __typename\r\n      messages(limit: 20, sortDirection: DESC) {\r\n        __typename\r\n        items {\r\n          __typename\r\n          id\r\n          when\r\n          content\r\n          owner\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_MESSAGES_SUB = gql`\r\n  subscription OnCreateMessage($roomId: ID!) {\r\n    onCreateMessage(roomId: $roomId) {\r\n      __typename\r\n      id\r\n      when\r\n      content\r\n      owner\r\n      roomId\r\n    }\r\n  }\r\n`;\r\n\r\nfunction ChatWithData({ match, username }) {\r\n  return (\r\n    <Query\r\n      variables={{\r\n        roomId: match.params.roomId\r\n      }}\r\n      query={GET_ROOM_MESSAGES}\r\n      fetchPolicy=\"cache-and-network\"\r\n    >\r\n      {({ data, subscribeToMore, ...results }) => (\r\n        <Mutation mutation={CREATE_MESSAGE}>\r\n          {mutate => (\r\n            <Chat\r\n              {...results}\r\n              user={username}\r\n              data={data}\r\n              subscribeToNewMessages={() => {\r\n                subscribeToMore({\r\n                  document: CREATE_MESSAGES_SUB,\r\n                  variables: {\r\n                    roomId: match.params.roomId\r\n                  },\r\n                  updateQuery: (prev, { subscriptionData }) => {\r\n                    if (!subscriptionData.data) return prev;\r\n                    const newMessage = subscriptionData.data.onCreateMessage;\r\n                    return Object.assign({}, prev, {\r\n                      getRoom: {\r\n                        ...prev.getRoom,\r\n                        messages: {\r\n                          ...prev.getRoom.messages,\r\n                          items: [\r\n                            newMessage,\r\n                            ...prev.getRoom.messages.items.filter(\r\n                              item => item.id !== newMessage.id\r\n                            )\r\n                          ]\r\n                        }\r\n                      }\r\n                    });\r\n                  }\r\n                });\r\n              }}\r\n              onSend={content => {\r\n                mutate({\r\n                  variables: {\r\n                    content,\r\n                    roomId: match.params.roomId,\r\n                    when: new Date()\r\n                  },\r\n                  optimisticResponse: () => ({\r\n                    createMessage: {\r\n                      __typename: \"Message\",\r\n                      id: uuid(),\r\n                      when: new Date(),\r\n                      owner: username,\r\n                      content\r\n                    }\r\n                  }),\r\n                  update: (cache, { data: { createMessage } }) => {\r\n                    const data = cache.readQuery({\r\n                      query: GET_ROOM_MESSAGES,\r\n                      variables: { roomId: match.params.roomId }\r\n                    });\r\n                    data.getRoom.messages.items = [\r\n                      createMessage,\r\n                      ...data.getRoom.messages.items.filter(\r\n                        item => item.id !== createMessage.id\r\n                      )\r\n                    ];\r\n\r\n                    cache.writeQuery({\r\n                      query: GET_ROOM_MESSAGES,\r\n                      variables: { roomId: match.params.roomId },\r\n                      data\r\n                    });\r\n                  }\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n        </Mutation>\r\n      )}\r\n    </Query>\r\n  );\r\n}\r\n\r\nexport default withUser(ChatWithData);","import React from \"react\";\r\nimport { Auth } from \"aws-amplify\";\r\n\r\nexport const withUser = WrappedComponent => {\r\n  class HOC extends React.Component {\r\n    state = {\r\n      username: null\r\n    };\r\n    async componentDidMount() {\r\n      const user = await Auth.currentAuthenticatedUser();\r\n      this.setState({\r\n        username: user.username\r\n      });\r\n    }\r\n    render() {\r\n      const { username } = this.state;\r\n      if (!username) return \"Loading...\";\r\n      return <WrappedComponent {...this.props} username={username} />;\r\n    }\r\n  }\r\n\r\n  return HOC;\r\n};","import React, { Component } from \"react\";\nimport AWSAppSyncClient from \"aws-appsync\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport { ApolloProvider } from \"react-apollo\";\n//import { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\nimport { Rehydrated } from \"aws-appsync-react\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport AppSyncConfig from \"./aws-exports\";\nimport Rooms from \"./Rooms\";\n//import Chat from \"./Chat\";\nimport ChatWithData from \"./ChatWithData\";\n\n\n\n\n\n\nAmplify.configure(AppSyncConfig);\n\nconst client = new AWSAppSyncClient({\n  url: AppSyncConfig.aws_appsync_graphqlEndpoint,\n  region: AppSyncConfig.aws_appsync_region,\n  auth: {\n    type: AppSyncConfig.aws_appsync_authenticationType,\n    credentials: () => Auth.currentCredentials(),\n    jwtToken: async () =>\n      (await Auth.currentSession()).getAccessToken().getJwtToken()\n  },\n  complexObjectsCredentials: () => Auth.currentCredentials()\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      \n        <Rehydrated>\n          <Router>\n            <Switch>\n              <Route path=\"/room/:roomId\" component={ChatWithData} />\n              <Route path=\"/\" component={Rooms} />\n            </Switch>\n          </Router>\n        </Rehydrated>\n        \n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withAuthenticator(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}